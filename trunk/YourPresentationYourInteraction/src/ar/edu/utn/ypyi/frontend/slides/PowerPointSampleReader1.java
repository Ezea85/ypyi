package ar.edu.utn.ypyi.frontend.slides;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.io.File;

import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;

import org.apache.poi.hslf.HSLFSlideShow;
import org.apache.poi.hslf.model.Notes;
import org.apache.poi.hslf.model.Slide;
import org.apache.poi.hslf.model.TextRun;
import org.apache.poi.hslf.usermodel.SlideShow;

/**
 * 
 * @author PC182
 */
public class PowerPointSampleReader1 extends javax.swing.JFrame {

	/**
	 * 
	 */
	private static final long serialVersionUID = 9188471719597502474L;

	/** Creates new form PowerPointSampleReader1 */
	int current = 0;
	int all = 0;
	String filename;

	public PowerPointSampleReader1() {
		initComponents();

		this.setExtendedState(this.getExtendedState() | MAXIMIZED_BOTH);
//		filename = "C:/Users/PC182/Documents/NetBeansProjects/tes/OSUM.ppt";
		filename = fileChooser();
		btnBack.setEnabled(false);
		Display(1, filename);
	}

	public void Display(int currentPage, String source) {
		try {
			// Create a slideshow object; this creates an underlying
			// POIFSFileSystem object for us
			SlideShow ppt = new SlideShow(new HSLFSlideShow(source));
			current = currentPage;
			// Get all of the slides from the PPT file
			Slide[] slides = ppt.getSlides();
			Dimension pgsize = ppt.getPageSize();
			all = slides.length;
			String temp = "";
			lblPage.setText(currentPage + " / " + all);

			BufferedImage img = new BufferedImage(pgsize.width, pgsize.height,
					BufferedImage.TYPE_INT_RGB);
			Graphics2D graphics = img.createGraphics();
			// clear the drawing area
			graphics.setPaint(Color.white);
			// graphics.setBackground(Color.red);
			graphics.fill(new Rectangle2D.Float(0, 0, pgsize.width,
					pgsize.height));

			// render
			slides[currentPage - 1].draw(graphics);
			// save the output
			/*
			 * FileOutputStream out = new FileOutputStream("slide-" + (i + 1) +
			 * ".png"); javax.imageio.ImageIO.write(img, "png", out);
			 * out.close(); //ImageIcon icon = new ImageIcon("slide-" + (i + 1)
			 * + ".png");
			 */
			ImageIcon icon = new ImageIcon(img);
			lblPresentasi.setIcon(icon);
			// Obtain metrics about the slide: its number and name
			int number = slides[currentPage - 1].getSlideNumber();
			String title = slides[currentPage - 1].getTitle();

			// Obtain the embedded text in the slide
			TextRun[] textRuns = slides[currentPage - 1].getTextRuns();
			System.out.println("Slide " + number + ": " + title);
			System.out.println("\tText Runs");
			txtArea.setText("Slide : " + number + " Title : " + title + "\n");
			for (int j = 0; j < textRuns.length; j++) {
				// Display each of the text runs present on the slide
				System.out.println("\t\t" + j + ": " + textRuns[j].getText());
				temp = txtArea.getText();
				txtArea.setText(temp + "\t\t" + textRuns[j].getText() + "\n");
			}

			// Obtain the notes for this slide
			System.out.println("\tNotes: ");
			Notes notes = slides[currentPage - 1].getNotesSheet();
			if (notes != null) {
				// Notes are comprised of an array of text runs
				TextRun[] notesTextRuns = notes.getTextRuns();
				for (int j = 0; j < notesTextRuns.length; j++) {
					System.out.println("\t\t" + notesTextRuns[j].getText());
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		jScrollPane1 = new javax.swing.JScrollPane();
		txtArea = new javax.swing.JTextArea();
		lblPresentasi = new javax.swing.JLabel();
		lblPage = new javax.swing.JLabel();
		btnNext = new javax.swing.JButton();
		btnBack = new javax.swing.JButton();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		setTitle("Rio Simple PPTViewer");
		setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
		setLocationByPlatform(true);

		txtArea.setColumns(20);
		txtArea.setRows(5);
		jScrollPane1.setViewportView(txtArea);

		lblPage.setText("n / all");

		btnNext.setText("Next >>");
		btnNext.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnNextActionPerformed(evt);
			}
		});

		btnBack.setText("<< Back");
		btnBack.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnBackActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(
				getContentPane());
		getContentPane().setLayout(layout);
		layout
				.setHorizontalGroup(layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								layout
										.createSequentialGroup()
										.addGroup(
												layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING)
														.addGroup(
																layout
																		.createSequentialGroup()
																		.addGap(
																				39,
																				39,
																				39)
																		.addComponent(
																				jScrollPane1,
																				javax.swing.GroupLayout.PREFERRED_SIZE,
																				328,
																				javax.swing.GroupLayout.PREFERRED_SIZE)
																		.addGap(
																				10,
																				10,
																				10)
																		.addComponent(
																				lblPresentasi,
																				javax.swing.GroupLayout.PREFERRED_SIZE,
																				720,
																				javax.swing.GroupLayout.PREFERRED_SIZE))
														.addGroup(
																layout
																		.createSequentialGroup()
																		.addGap(
																				403,
																				403,
																				403)
																		.addComponent(
																				lblPage)
																		.addGap(
																				266,
																				266,
																				266)
																		.addComponent(
																				btnBack)
																		.addGap(
																				40,
																				40,
																				40)
																		.addComponent(
																				btnNext)))
										.addContainerGap(
												javax.swing.GroupLayout.DEFAULT_SIZE,
												Short.MAX_VALUE)));
		layout
				.setVerticalGroup(layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								layout
										.createSequentialGroup()
										.addContainerGap()
										.addGroup(
												layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING)
														.addComponent(
																lblPresentasi,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																540,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(
																jScrollPane1,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																293,
																javax.swing.GroupLayout.PREFERRED_SIZE))
										.addGap(18, 18, 18)
										.addGroup(
												layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING)
														.addGroup(
																layout
																		.createParallelGroup(
																				javax.swing.GroupLayout.Alignment.BASELINE)
																		.addComponent(
																				btnNext)
																		.addComponent(
																				btnBack))
														.addComponent(lblPage))
										.addContainerGap(30, Short.MAX_VALUE)));

		pack();
	}// </editor-fold>

	private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {
		current++;
		btnBack.setEnabled(true);
		if (current == all) {
			btnNext.setEnabled(false);
		}
		Display(current, filename);
	}

	private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {
		current--;
		btnNext.setEnabled(true);
		if (current == 1) {
			btnBack.setEnabled(false);
		}
		Display(current, filename);
	}

	private String fileChooser() {
	    JFileChooser chooser = new JFileChooser();
	    chooser.setCurrentDirectory(new File("."));

	    chooser.setFileFilter(new javax.swing.filechooser.FileFilter() {
	      public boolean accept(File f) {
	        return f.getName().toLowerCase().endsWith(".ppt")
	        	|| f.getName().toLowerCase().endsWith(".pps")
	            || f.isDirectory();
	      }

	      public String getDescription() {
	        return "Power Point Presentations";
	      }
	    });

	    int r = chooser.showOpenDialog(new JFrame());
	    if (r == JFileChooser.APPROVE_OPTION) {
	      String name = chooser.getSelectedFile().getAbsolutePath();
	      System.out.println(name);
	      return name;
	    }
	    
	    return null;
	  }
	
	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {
		java.awt.EventQueue.invokeLater(new Runnable() {

			public void run() {
				new PowerPointSampleReader1().setVisible(true);

			}
		});
	}

	// Variables declaration - do not modify
	private javax.swing.JButton btnBack;
	private javax.swing.JButton btnNext;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JLabel lblPage;
	private javax.swing.JLabel lblPresentasi;
	private javax.swing.JTextArea txtArea;
	// End of variables declaration
}
